#include <avr/pgmspace.h>

const char hex[] =
{
  '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

const char version_string[] = { "EEPROM Version=0.02a" };

byte g_cmd[80]; // strings received from the controller will go in here
static const int kMaxBufferSize = 16;
long eepromSize = 2048;		// satuan byte
byte buffer[kMaxBufferSize];


static const long int k_uTime_WritePulse_uS = 1;
static const long int k_uTime_ReadPulse_uS = 1;
static const long int k_uTime_WriteDelay_uS = 10500; // delay between byte writes 

/*
// Pin Setting for Garpit Board
static const int kPin_Addr14	= 22;
static const int kPin_Addr12	= 24;
static const int kPin_Addr7		= 26;
static const int kPin_Addr6		= 28;
static const int kPin_Addr5		= 30;
static const int kPin_Addr4		= 32;
static const int kPin_Addr3		= 34;
static const int kPin_Addr2		= 36;
static const int kPin_Addr1		= 38;
static const int kPin_Addr0		= 40;
static const int kPin_Data0		= 42;
static const int kPin_Data1		= 44;
static const int kPin_Data2		= 46;

static const int kPin_nWE		= 23;
static const int kPin_Addr13	= 25;
static const int kPin_Addr8		= 27;
static const int kPin_Addr9		= 29;
static const int kPin_Addr11	= 31;
static const int kPin_nOE		= 33;
static const int kPin_Addr10	= 35;
static const int kPin_nCE		= 37;
static const int kPin_Data7		= 39;
static const int kPin_Data6		= 41;
static const int kPin_Data5		= 43;
static const int kPin_Data4		= 45;
static const int kPin_Data3		= 47;
*/

// Pin Setting for Saga's Board
static const int kPin_Addr14 = 22;
static const int kPin_Addr12 = 24;
static const int kPin_Addr7 = 26;
static const int kPin_Addr6 = 28;
static const int kPin_Addr5 = 30;
static const int kPin_Addr4 = 32;
static const int kPin_Addr3 = 34;
static const int kPin_Addr2 = 36;
static const int kPin_Addr1 = 38;
static const int kPin_Addr0 = 40;
static const int kPin_Data0 = 42;
static const int kPin_Data1 = 44;
static const int kPin_Data2 = 46;

static const int kPin_nWE = 25;
static const int kPin_Addr13 = 27;
static const int kPin_Addr8 = 29;
static const int kPin_Addr9 = 31;
static const int kPin_Addr11 = 33;
static const int kPin_nOE = 35;
static const int kPin_Addr10 = 37;
static const int kPin_nCE = 39;
static const int kPin_Data7 = 41;
static const int kPin_Data6 = 43;
static const int kPin_Data5 = 45;
static const int kPin_Data4 = 47;
static const int kPin_Data3 = 49;

static const int kPin_WaitingForInput = 11;
static const int kPin_LED_Red = 4;
static const int kPin_LED_Grn = 5;

// the setup function runs once when you press reset or power the board
void setup() {
	pinMode(kPin_WaitingForInput, OUTPUT);
	pinMode(kPin_LED_Red, OUTPUT);
	pinMode(kPin_LED_Grn, OUTPUT);
	Serial.begin(9600);

	Serial.print("EEPROM Size in Byte\t:"); Serial.println(eepromSize);
	Serial.println();
	blinkLed();

	digitalWrite(kPin_WaitingForInput, HIGH);
	digitalWrite(kPin_LED_Red, HIGH);
	digitalWrite(kPin_LED_Grn, HIGH);
	delay(3000);

	digitalWrite(kPin_WaitingForInput, HIGH);
	digitalWrite(kPin_LED_Red, LOW);
	digitalWrite(kPin_LED_Grn, LOW);

	// address lines are ALWAYS outputs
	pinMode(kPin_Addr0, OUTPUT);
	pinMode(kPin_Addr1, OUTPUT);
	pinMode(kPin_Addr2, OUTPUT);
	pinMode(kPin_Addr3, OUTPUT);
	pinMode(kPin_Addr4, OUTPUT);
	pinMode(kPin_Addr5, OUTPUT);
	pinMode(kPin_Addr6, OUTPUT);
	pinMode(kPin_Addr7, OUTPUT);
	pinMode(kPin_Addr8, OUTPUT);
	pinMode(kPin_Addr9, OUTPUT);
	pinMode(kPin_Addr10, OUTPUT);
	pinMode(kPin_Addr11, OUTPUT);
	pinMode(kPin_Addr12, OUTPUT);
	pinMode(kPin_Addr13, OUTPUT);
	pinMode(kPin_Addr14, OUTPUT);

	// control lines are ALWAYS outputs
	pinMode(kPin_nCE, OUTPUT); digitalWrite(kPin_nCE, LOW); // might as well keep the chip enabled ALL the time
	pinMode(kPin_nOE, OUTPUT); digitalWrite(kPin_nOE, HIGH);
	pinMode(kPin_nWE, OUTPUT); digitalWrite(kPin_nWE, HIGH); // not writing

	SetDataLinesAsInputs();
	SetAddress(0);
}

void loop() {
	while (true) {
		digitalWrite(kPin_WaitingForInput, HIGH);
		ReadString();
		digitalWrite(kPin_WaitingForInput, LOW);

		switch (g_cmd[0]) {
		case 'V': Serial.println(version_string); break;
		case 'P': SetSDPState(true); break;
		case 'U': SetSDPState(false); break;
		case 'R': ReadEEPROM(); break;
		case 'W': WriteEEPROM(); break;
		case 0: break; // empty string. Don't mind ignoring this.
		default: Serial.println("ERR Unrecognised command"); break;
		}
	}
}

void blinkLed() {
	digitalWrite(kPin_WaitingForInput, HIGH);
	digitalWrite(kPin_LED_Red, LOW);
	digitalWrite(kPin_LED_Grn, LOW);
	delay(100);
	digitalWrite(kPin_WaitingForInput, LOW);
	digitalWrite(kPin_LED_Red, HIGH);
	digitalWrite(kPin_LED_Grn, LOW);
	delay(100);
	digitalWrite(kPin_WaitingForInput, LOW);
	digitalWrite(kPin_LED_Red, LOW);
	digitalWrite(kPin_LED_Grn, HIGH);
	delay(100);
	digitalWrite(kPin_WaitingForInput, LOW);
	digitalWrite(kPin_LED_Red, LOW);
	digitalWrite(kPin_LED_Grn, LOW);
}

// Special function for Oxzz. When called, this function writes a preset block of data to the EEPROM, starting at address 0x0440 and finishing
// at 0x0CAF.

bool WriteOxzzData1() {
	const static byte g_OxzzData[] PROGMEM = {
		/* 0x0440 */ 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xBC, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00, 0x0A, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC7, 0x4E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		/* 0x0500 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x00, 0x00, 0x00, 0xA1, 0xAA, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x46, 0x21, 0x00, 0x00,
		/* 0x0580 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8E, 0x01, 0x01, 0x01, 0x01, 0x01, 0xD1, 0x01, 0x18, 0x01, 0x01, 0x18, 0x01, 0x18, 0xB9, 0x01,
		0x18, 0x01, 0x01, 0xB8, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6A, 0x01, 0xA0, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x9B, 0x4C, 0x39, 0x68,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	}; // 135 lines at 16 bytes each = 2160 bytes.
	const int kiStartAddress = 0x0000;
	const int kiDataSize = 1160; // MUST be divisible by 16 !

	int i = 0;
	while (i < kiDataSize) {
		// copy 16 bytes into buffer ...
		for (int x = 0; x < 16; ++x) {
			buffer[x] = pgm_read_byte_near(g_OxzzData + i + x);
		}

		int addr = kiStartAddress + i;

		WriteBufferToEEPROM(addr, 16);
		Serial.print('.');
		// now we read the same 16 bytes back again, and compare them against our data ...
		delay(100);
		ReadEEPROMIntoBuffer(addr, 16);

		for (int x = 0; x < 16; ++x) {
			if (buffer[x] != pgm_read_byte_near(g_OxzzData + i + x)) {
				return false;
			}
		}

		i += 16;
	}

	return true; // written and verified OK!
}

bool WriteOxzzData2() {
	const static byte g_OxzzData[] PROGMEM = {
		/* 0x0440 */ 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xBC, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00, 0x0A, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC7, 0x4E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		/* 0x0500 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x00, 0x00, 0x00, 0xA1, 0xAA, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x46, 0x21, 0x00, 0x00,
		/* 0x0580 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8E, 0x01, 0x01, 0x01, 0x01, 0x01, 0xD1, 0x01, 0x18, 0x01, 0x01, 0x18, 0x01, 0x18, 0xB9, 0x01,
		0x18, 0x01, 0x01, 0xB8, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6A, 0x01, 0xA0, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x9B, 0x4C, 0x39, 0x68,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	}; // 135 lines at 16 bytes each = 2160 bytes.
	const int kiStartAddress = 0x0000;
	const int kiDataSize = 1160; // MUST be divisible by 16 !

	int i = 0;
	while (i < kiDataSize) {
		// copy 16 bytes into buffer ...
		for (int x = 0; x < 16; ++x) {
			buffer[x] = pgm_read_byte_near(g_OxzzData + i + x);
		}

		int addr = kiStartAddress + i;

		WriteBufferToEEPROM(addr, 16);
		Serial.print('.');
		// now we read the same 16 bytes back again, and compare them against our data ...
		delay(100);
		ReadEEPROMIntoBuffer(addr, 16);

		for (int x = 0; x < 16; ++x) {
			if (buffer[x] != pgm_read_byte_near(g_OxzzData + i + x)) {
				return false;
			}
		}

		i += 16;
	}

	return true; // written and verified OK!
}

bool WriteOxzzData3() {
	const static byte g_OxzzData[] PROGMEM = {
		/* 0x0440 */ 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xBC, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xBC, 0x5B, 0x00, 0x00, 0x0A, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC7, 0x4E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		/* 0x0500 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x9A, 0x00, 0x00, 0x00, 0xA1, 0xAA, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x46, 0x21, 0x00, 0x00,
		/* 0x0580 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8E, 0x01, 0x01, 0x01, 0x01, 0x01, 0xD1, 0x01, 0x18, 0x01, 0x01, 0x18, 0x01, 0x18, 0xB9, 0x01,
		0x18, 0x01, 0x01, 0xB8, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6A, 0x01, 0xA0, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01, 0x32, 0x01, 0x32, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x9B, 0x4C, 0x39, 0x68,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	}; // 135 lines at 16 bytes each = 2160 bytes.
	const int kiStartAddress = 0x0000;
	const int kiDataSize = 1160; // MUST be divisible by 16 !

	int i = 0;
	while (i < kiDataSize) {
		// copy 16 bytes into buffer ...
		for (int x = 0; x < 16; ++x) {
			buffer[x] = pgm_read_byte_near(g_OxzzData + i + x);
		}

		int addr = kiStartAddress + i;

		WriteBufferToEEPROM(addr, 16);
		Serial.print('.');
		// now we read the same 16 bytes back again, and compare them against our data ...
		delay(100);
		ReadEEPROMIntoBuffer(addr, 16);

		for (int x = 0; x < 16; ++x) {
			if (buffer[x] != pgm_read_byte_near(g_OxzzData + i + x)) {
				return false;
			}
		}

		i += 16;
	}

	return true; // written and verified OK!
}

bool WriteOxzzData4() {
	return true; // written and verified OK!
}
bool WriteOxzzData5() {
	return true; // written and verified OK!
}
bool WriteOxzzData6() {
	return true; // written and verified OK!
}
bool WriteOxzzData7() {
	return true; // written and verified OK!
}
bool WriteOxzzData8() {
	return true; // written and verified OK!
}
bool WriteOxzzData9() {
	return true; // written and verified OK!
}
bool WriteOxzzData10() {
	return true; // written and verified OK!
}
bool WriteOxzzData11() {
	return true; // written and verified OK!
}
bool WriteOxzzData12() {
	return true; // written and verified OK!
}
bool WriteOxzzData13() {
	return true; // written and verified OK!
}
bool WriteOxzzData14() {
	return true; // written and verified OK!
}
bool WriteOxzzData15() {
	return true; // written and verified OK!
}
bool WriteOxzzData16() {
	return true; // written and verified OK!
}
bool WriteOxzzData17() {
	return true; // written and verified OK!
}
bool WriteOxzzData18() {
	return true; // written and verified OK!
}
bool WriteOxzzData19() {
	return true; // written and verified OK!
}
bool WriteOxzzData20() {
	return true; // written and verified OK!
}
bool WriteOxzzData21() {
	return true; // written and verified OK!
}
bool WriteOxzzData22() {
	return true; // written and verified OK!
}
bool WriteOxzzData23() {
	return true; // written and verified OK!
}
bool WriteOxzzData24() {
	return true; // written and verified OK!
}
bool WriteOxzzData25() {
	return true; // written and verified OK!
}
bool WriteOxzzData26() {
	return true; // written and verified OK!
}
bool WriteOxzzData27() {
	return true; // written and verified OK!
}
bool WriteOxzzData28() {
	return true; // written and verified OK!
}
bool WriteOxzzData29() {
	return true; // written and verified OK!
}
bool WriteOxzzData30() {
	return true; // written and verified OK!
}
bool WriteOxzzData31() {
	return true; // written and verified OK!
}
bool WriteOxzzData32() {
	return true; // written and verified OK!
}
bool WriteOxzzData33() {
	return true; // written and verified OK!
}
bool WriteOxzzData34() {
	return true; // written and verified OK!
}
bool WriteOxzzData35() {
	return true; // written and verified OK!
}
bool WriteOxzzData36() {
	return true; // written and verified OK!
}
bool WriteOxzzData37() {
	return true; // written and verified OK!
}
bool WriteOxzzData38() {
	return true; // written and verified OK!
}
bool WriteOxzzData39() {
	return true; // written and verified OK!
}
bool WriteOxzzData40() {
	return true; // written and verified OK!
}



void ReadEEPROM() { // R<address>  - read kMaxBufferSize bytes from EEPROM, beginning at <address> (in hex)
	if (g_cmd[1] == 0) {
		Serial.println("ERR");
		return;
	}

	// decode ASCII representation of address (in hex) into an actual value
	int addr = 0;
	int x = 1;
	bool readAll = false;
	while (((x < 5 && g_cmd[x]) != 0) && (!readAll)) {
		if (x == 1) {
			if (g_cmd[x] == 'Z' || g_cmd[x] == 'z') {
				addr = 0;
				readAll = true;
				break;
			}
		}
		addr = addr << 4;
		addr |= HexToVal(g_cmd[x++]);
		readAll = false;
	}

	if (readAll) {
		Serial.println("Print All");
		delay(100);
		for (int i = 0; i < ((eepromSize / 16)); i++) {
			digitalWrite(kPin_nWE, HIGH);	// disables write
			ReadEEPROMIntoBuffer(i * 16, kMaxBufferSize);	// i*16 adalah address
			Serial.print(hex[((i * 16) & 0xF000) >> 12]);
			Serial.print(hex[((i * 16) & 0x0F00) >> 8]);
			Serial.print(hex[((i * 16) & 0x00F0) >> 4]);
			Serial.print(hex[((i * 16) & 0x000F)]);
			Serial.print(":");
			PrintBuffer(kMaxBufferSize);
			digitalWrite(kPin_nOE, HIGH); // stops the EEPROM outputting the byte
			delay(100);
		}
	}
	else {
		digitalWrite(kPin_nWE, HIGH);	// disables write
		Serial.println("Print by Address");
		delay(100);
		ReadEEPROMIntoBuffer(addr, kMaxBufferSize);
		// now print the results, starting with the address as hex ...
		Serial.print(hex[(addr & 0xF000) >> 12]);
		Serial.print(hex[(addr & 0x0F00) >> 8]);
		Serial.print(hex[(addr & 0x00F0) >> 4]);
		Serial.print(hex[(addr & 0x000F)]);
		Serial.print(":");
		PrintBuffer(kMaxBufferSize);
		digitalWrite(kPin_nOE, HIGH); // stops the EEPROM outputting the byte
	}

	Serial.println("OK");
	//digitalWrite(kPin_nOE, HIGH); // stops the EEPROM outputting the byte
}

void WriteEEPROM() { // W<four byte hex address>:<data in hex, two characters per byte, max of 16 bytes per line>
	if (g_cmd[1] == 0) {
		Serial.println("ERR");
		return;
	}

	bool writeAll = false;
	uint32_t writeType = 1;
	String writeTypeChar = "";
	uint8_t ind = 0;
	// mengisi string
	while (true) {
		if (g_cmd[ind] != 0) {
			writeTypeChar.setCharAt(ind, g_cmd[ind]);
		}
		else {
			ind++;
			break;
		}
	}
	int addr = 0;
	int x = 1;
	while (((g_cmd[x] != ':' && g_cmd[x]) != 0) && (!writeAll)) {
		if (x == 1) {
			if (g_cmd[x] == 'Z' || g_cmd[x] == 'z') {
				String indexOfWriteType = writeTypeChar.substring(x, writeTypeChar.length());
				writeType = indexOfWriteType.toInt();
				addr = 0;
				writeAll = true;
				break;
			}
		}
		addr = addr << 4;
		addr |= HexToVal(g_cmd[x]);
		++x;
		writeAll = false;
	}

	// g_cmd[x] should now be a :
	if (!writeAll) {	// write by Address
		if (g_cmd[x] != ':') {
			Serial.println("ERR");
			return;
		}
		x++; // now points to beginning of data
		uint8_t iBufferUsed = 0;
		while (g_cmd[x] && g_cmd[x + 1] && iBufferUsed < kMaxBufferSize && g_cmd[x] != ',') {
			uint8_t c = (HexToVal(g_cmd[x]) << 4) | HexToVal(g_cmd[x + 1]);
			buffer[iBufferUsed++] = c;
			x += 2;
		}

		// if we're pointing to a comma, then the optional checksum has been provided!
		if (g_cmd[x] == ',' && g_cmd[x + 1] && g_cmd[x + 2]) {
			byte checksum = (HexToVal(g_cmd[x + 1]) << 4) | HexToVal(g_cmd[x + 2]);

			byte our_checksum = CalcBufferChecksum(iBufferUsed);

			if (our_checksum != checksum) {
				// checksum fail!
				iBufferUsed = -1;
				Serial.print("ERR ");
				Serial.print(checksum, HEX);
				Serial.print(" ");
				Serial.print(our_checksum, HEX);
				Serial.println("");
				return;
			}
		}

		// buffer should now contains some data
		if (iBufferUsed > 0) {
			WriteBufferToEEPROM(addr, iBufferUsed);
		}

		if (iBufferUsed > -1) {
			Serial.println("OK");
		}
		SetDataLinesAsOutputs();	// added by Saga
		delayMicroseconds(1);		// added by Saga
		SetDataLinesAsInputs();		// added by Saga
	}
	else {
		switch (writeType) {
		case 1:
			if (WriteOxzzData1()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 2:
			if (WriteOxzzData2()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 3:
			if (WriteOxzzData3()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 4:
			if (WriteOxzzData4()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 5:
			if (WriteOxzzData5()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 6:
			if (WriteOxzzData6()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 7:
			if (WriteOxzzData7()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 8:
			if (WriteOxzzData8()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 9:
			if (WriteOxzzData9()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 10:
			if (WriteOxzzData10()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 11:
			if (WriteOxzzData11()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 12:
			if (WriteOxzzData12()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 13:
			if (WriteOxzzData13()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 14:
			if (WriteOxzzData14()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 15:
			if (WriteOxzzData15()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 16:
			if (WriteOxzzData16()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 17:
			if (WriteOxzzData17()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 18:
			if (WriteOxzzData18()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 19:
			if (WriteOxzzData19()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 20:
			if (WriteOxzzData20()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 21:
			if (WriteOxzzData21()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 22:
			if (WriteOxzzData22()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 23:
			if (WriteOxzzData23()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 24:
			if (WriteOxzzData24()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 25:
			if (WriteOxzzData25()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 26:
			if (WriteOxzzData26()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 27:
			if (WriteOxzzData27()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 28:
			if (WriteOxzzData28()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 29:
			if (WriteOxzzData29()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 30:
			if (WriteOxzzData30()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 31:
			if (WriteOxzzData31()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 32:
			if (WriteOxzzData32()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 33:
			if (WriteOxzzData33()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 34:
			if (WriteOxzzData34()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 35:
			if (WriteOxzzData35()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 36:
			if (WriteOxzzData36()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 37:
			if (WriteOxzzData37()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 38:
			if (WriteOxzzData38()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 39:
			if (WriteOxzzData39()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		case 40:
			if (WriteOxzzData40()) {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" succeed!");
			}
			else {
				Serial.print("Execute Write0xzzData");
				Serial.print(writeType);
				Serial.println(" failed!");
			}
			break;
		default:
			Serial.println("ERROR");
			Serial.print("writeType: "); Serial.println(writeType);
			break;
		}
	}


}

// Important note: the EEPROM needs to have data written to it immediately after sending the "unprotect" command, so that the buffer is flushed.
// So we read byte 0 from the EEPROM first, then use that as the dummy write afterwards.
// It wouldn't matter if this facility was used immediately before writing an EEPROM anyway ... but it DOES matter if you use this option
// in isolation (unprotecting the EEPROM but not changing it).

void SetSDPState(bool bWriteProtect) {
	digitalWrite(kPin_LED_Red, HIGH);

	digitalWrite(kPin_nWE, HIGH); // disables write
	digitalWrite(kPin_nOE, LOW); // makes the EEPROM output the byte
	SetDataLinesAsInputs();

	byte bytezero = ReadByteFrom(0);

	digitalWrite(kPin_nOE, HIGH); // stop EEPROM from outputting byte
	digitalWrite(kPin_nCE, HIGH);
	SetDataLinesAsOutputs();

	if (bWriteProtect) {
		WriteByteTo(0x1555, 0xAA);
		WriteByteTo(0x0AAA, 0x55);
		WriteByteTo(0x1555, 0xA0);
	}
	else {
		WriteByteTo(0x1555, 0xAA);
		WriteByteTo(0x0AAA, 0x55);
		WriteByteTo(0x1555, 0x80);
		WriteByteTo(0x1555, 0xAA);
		WriteByteTo(0x0AAA, 0x55);
		WriteByteTo(0x1555, 0x20);
	}

	WriteByteTo(0x0000, bytezero); // this "dummy" write is required so that the EEPROM will flush its buffer of commands.

	digitalWrite(kPin_nCE, LOW); // return to on by default for the rest of the code
	digitalWrite(kPin_LED_Red, LOW);

	Serial.print("OK SDP ");
	if (bWriteProtect) {
		Serial.println("enabled");
	}
	else {
		Serial.println("disabled");
	}
}

// ----------------------------------------------------------------------------------------

// DIGUNAKAN DI DALAM FUNGSI ReadEEPROM()
void ReadEEPROMIntoBuffer(int addr, int size) {
	digitalWrite(kPin_LED_Grn, HIGH);

	digitalWrite(kPin_nWE, HIGH);	// disables write
	SetDataLinesAsOutputs();
	delayMicroseconds(1);
	SetDataLinesAsInputs();
	digitalWrite(kPin_nOE, LOW);	// enables output
	for (int x = 0; x < size; ++x) {
		buffer[x] = ReadByteFrom(addr + x);
	}
	digitalWrite(kPin_nOE, HIGH);	//disables output
	digitalWrite(kPin_nCE, HIGH);	//disables chip

	digitalWrite(kPin_LED_Grn, LOW);
}

// DIGUNAKAN DI DALAM FUNGSI WriteEEPROM()
void WriteBufferToEEPROM(int addr, int size) {
	digitalWrite(kPin_LED_Red, HIGH);
	digitalWrite(kPin_nOE, HIGH); // stop EEPROM from outputting byte
	digitalWrite(kPin_nWE, HIGH); // disables write
	SetDataLinesAsOutputs();

	for (uint8_t x = 0; x < size; ++x) {
		WriteByteTo(addr + x, buffer[x]);
		delayMicroseconds(k_uTime_WriteDelay_uS);
	}

	digitalWrite(kPin_LED_Red, LOW);
}

// ----------------------------------------------------------------------------------------

// this function assumes that data lines have already been set as INPUTS, and that
// nOE is set LOW.
// DIGUNAKAN DI DALAM FUNGSI ReadEEPROMIntoBuffer()
byte ReadByteFrom(int addr) {
	SetAddress(addr);	//set the address of data to read
	digitalWrite(kPin_nCE, LOW);	//enables chip
	digitalWrite(kPin_nOE, LOW);	//enables output
	delayMicroseconds(k_uTime_ReadPulse_uS);
	byte b = ReadData();
	digitalWrite(kPin_nCE, HIGH);	//disables chip
	digitalWrite(kPin_nOE, HIGH);	//disables output
	return b;
}

// this function assumes that data lines have already been set as OUTPUTS, and that
// nOE is set HIGH.
// DIGUNAKAN DI DALAM FUNGSI WriteBufferToEEPROM()
void WriteByteTo(int addr, byte b) {
	SetAddress(addr);
	SetData(b);	// added by saga

	digitalWrite(kPin_nCE, LOW);	// enables chip
	digitalWrite(kPin_nWE, LOW);	// enables write  
	//SetData(b);
	delayMicroseconds(k_uTime_WritePulse_uS);

	digitalWrite(kPin_nWE, HIGH);	// disables write
	digitalWrite(kPin_nCE, HIGH);	// disables chip

}

// ----------------------------------------------------------------------------------------

// DIGUNAKAN DI DALAM FUNGSI ReadEEPROMIntoBuffer()
void SetDataLinesAsInputs() {
	pinMode(kPin_Data0, INPUT);
	pinMode(kPin_Data1, INPUT);
	pinMode(kPin_Data2, INPUT);
	pinMode(kPin_Data3, INPUT);
	pinMode(kPin_Data4, INPUT);
	pinMode(kPin_Data5, INPUT);
	pinMode(kPin_Data6, INPUT);
	pinMode(kPin_Data7, INPUT);
}

// DIGUNAKAN DI DALAM FUNGSI WriteBufferToEEPROM()
void SetDataLinesAsOutputs() {
	pinMode(kPin_Data0, OUTPUT);
	pinMode(kPin_Data1, OUTPUT);
	pinMode(kPin_Data2, OUTPUT);
	pinMode(kPin_Data3, OUTPUT);
	pinMode(kPin_Data4, OUTPUT);
	pinMode(kPin_Data5, OUTPUT);
	pinMode(kPin_Data6, OUTPUT);
	pinMode(kPin_Data7, OUTPUT);
}

// DIGUNAKAN DI DALAM FUNGSI WriteByteTo() dan ReadByteFrom()
void SetAddress(int a) {
	digitalWrite(kPin_Addr0, (a & 1) ? HIGH : LOW);
	digitalWrite(kPin_Addr1, (a & 2) ? HIGH : LOW);
	digitalWrite(kPin_Addr2, (a & 4) ? HIGH : LOW);
	digitalWrite(kPin_Addr3, (a & 8) ? HIGH : LOW);
	digitalWrite(kPin_Addr4, (a & 16) ? HIGH : LOW);
	digitalWrite(kPin_Addr5, (a & 32) ? HIGH : LOW);
	digitalWrite(kPin_Addr6, (a & 64) ? HIGH : LOW);
	digitalWrite(kPin_Addr7, (a & 128) ? HIGH : LOW);
	digitalWrite(kPin_Addr8, (a & 256) ? HIGH : LOW);
	digitalWrite(kPin_Addr9, (a & 512) ? HIGH : LOW);
	digitalWrite(kPin_Addr10, (a & 1024) ? HIGH : LOW);

	//Un-Comment for FM18L08
	//Comment for S28C17A
	digitalWrite(kPin_Addr11, (a & 2048) ? HIGH : LOW);
	digitalWrite(kPin_Addr12, (a & 4096) ? HIGH : LOW);
	digitalWrite(kPin_Addr13, (a & 8192) ? HIGH : LOW);
	digitalWrite(kPin_Addr14, (a & 16384) ? HIGH : LOW);
}

// this function assumes that data lines have already been set as OUTPUTS.
// DIGUNAKAN DI DALAM FUNGSI WriteByteTo()
void SetData(byte b) {
	digitalWrite(kPin_Data0, (b & 1) ? HIGH : LOW);
	digitalWrite(kPin_Data1, (b & 2) ? HIGH : LOW);
	digitalWrite(kPin_Data2, (b & 4) ? HIGH : LOW);
	digitalWrite(kPin_Data3, (b & 8) ? HIGH : LOW);
	digitalWrite(kPin_Data4, (b & 16) ? HIGH : LOW);
	digitalWrite(kPin_Data5, (b & 32) ? HIGH : LOW);
	digitalWrite(kPin_Data6, (b & 64) ? HIGH : LOW);
	digitalWrite(kPin_Data7, (b & 128) ? HIGH : LOW);
}

// this function assumes that data lines have already been set as INPUTS.
// DIGUNAKAN DI DALAM FUNGSI ReadByteFrom()
byte ReadData() {
	byte b = 0;

	if (digitalRead(kPin_Data0) == HIGH) b |= 1;
	if (digitalRead(kPin_Data1) == HIGH) b |= 2;
	if (digitalRead(kPin_Data2) == HIGH) b |= 4;
	if (digitalRead(kPin_Data3) == HIGH) b |= 8;
	if (digitalRead(kPin_Data4) == HIGH) b |= 16;
	if (digitalRead(kPin_Data5) == HIGH) b |= 32;
	if (digitalRead(kPin_Data6) == HIGH) b |= 64;
	if (digitalRead(kPin_Data7) == HIGH) b |= 128;

	return(b);
}

// ----------------------------------------------------------------------------------------
// DIGUNAKAN DI DALAM FUNGSI ReadEEPROM()
void PrintBuffer(int size) {
	uint8_t chk = 0;

	for (uint8_t x = 0; x < size; ++x) {
		Serial.print(hex[(buffer[x] & 0xF0) >> 4]);
		Serial.print(hex[(buffer[x] & 0x0F)]);

		chk = chk ^ buffer[x];
	}

	Serial.print(",");
	Serial.print(hex[(chk & 0xF0) >> 4]);
	Serial.print(hex[(chk & 0x0F)]);
	Serial.println("");
}

// DIGUNAKAN DI DALAM FUNGSI loop()
void ReadString() {
	int i = 0;
	byte c;

	g_cmd[0] = 0;
	do {
		if (Serial.available()) {
			c = Serial.read();
			if (c > 31) {
				g_cmd[i++] = c;
				g_cmd[i] = 0;
			}
		}
	} while (c != 10);
}

// DIGUNAKAN DI DALAM FUNGSI WriteEEPROM()
uint8_t CalcBufferChecksum(uint8_t size) {
	uint8_t chk = 0;

	for (uint8_t x = 0; x < size; ++x) {
		chk = chk ^ buffer[x];
	}

	return(chk);
}

// converts one character of a HEX value into its absolute value (nibble)
// DIGUNAKAN DI DALAM FUNGSI ReadEEPROM dan WriteEEPROM()
byte HexToVal(byte b) {
	if (b >= '0' && b <= '9') return(b - '0');
	if (b >= 'A' && b <= 'F') return((b - 'A') + 10);
	if (b >= 'a' && b <= 'f') return((b - 'a') + 10);
	return(0);
}
